// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  email String @unique
  hash  String

  curp      String
  matricule String

  roleID Int
  role   Role @relation(fields: [roleID], references: [id])

  firstName String?
  lastName  String?

  // Relation with Group model (Just for students)
  groupID Int
  group   Group @relation(fields: [groupID], references: [id])

  // Relation with Score model as a student
  scoresAsStudent Score[] @relation("StudentScores")

  // Relation with Score model as a professor
  scoresAsProfessor Score[] @relation("ProfessorScores")

  @@map("users")
}

model Score {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  grade1    Float?
  grade2    Float?
  grade3    Float?

  // Relation with Group model (Redundant but work for the moment)
  groupID Int
  group   Group @relation(fields: [groupID], references: [id])

  // Relation with User model when user role is Student
  studentId Int
  student   User @relation("StudentScores", fields: [studentId], references: [id])

  // Relation with User model when user role is Teacher
  professorId Int
  professor   User @relation("ProfessorScores", fields: [professorId], references: [id])

  // Relation with Subject model
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]

  @@map("roles")
}

model Career {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation with Subject model
  subjects Subject[]

  // Relation with Group model
  groups Group[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String
  period    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation with Career model
  careerId Int
  career   Career  @relation(fields: [careerId], references: [id])
  Score    Score[]
}

model Group {
  id     Int    @id @default(autoincrement())
  name   String
  period Int
  year   Int

  // Relation with Career model
  careerId Int
  career   Career  @relation(fields: [careerId], references: [id])
  User     User[]
  Score    Score[]
}
